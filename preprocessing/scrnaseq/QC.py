#!/usr/bin/env python3

####################
# Import libraries #
####################

import argparse
import scrublet as scr
import numpy as np
import pandas as pd
import scanpy as sc
import matplotlib.pyplot as plt
import os
import sys
import scipy
sc.settings.verbosity = 3
sc.logging.print_versions()
sys.executable
os.environ["HDF5_USE_FILE_LOCKING"] = "FALSE"
##################################
# Import reptract utils function #
##################################

utils_dir = '/nfs/team292/vl6/RepTract/'
sys.path.append(utils_dir)

import reptract_utils

##################################
# Define command line parameters #
##################################

parser = argparse.ArgumentParser()

# sample
parser.add_argument('--sample', nargs='+',  type=str, help='Sample ID.', required = True)

# scrublet_dir
parser.add_argument('--scrublet', nargs='+',  type=str, help='Path to where you want to save scrublet scores.', required = False)

# starsolo_dir 
parser.add_argument('--starsolo', type=str, nargs='+', help='Path to STARsolo output.',required=False)

# cellbender_dir 
parser.add_argument('--cellbender', type=str, nargs='+', help='Path to CellBender output.', required= False)

# figures_dir
parser.add_argument('--figures', type=str, nargs='+', help='Path to where you want to save the plots generated by the script.',required=True)

args = parser.parse_args()

####################
# Print parameters #
####################

print("Launching script with arguments:\n {}".format(args))

print('''
#####################
# Barcode rank plot #
#####################
''')

#reptract_utils.barcode_plot(args.sample[0], args.starsolo[0], args.figures[0])
print("Barcode rank plot saved in figures directory") 

print('''
###########################
# Compute scrublet scores #
###########################
''')

#reptract_utils.run_scrublet(args.sample[0], args.scrublet[0], args.starsolo[0])
print("Scrublet scores saved in scrublet directory") 

print('''
########################
# Load STARsolo output #
########################
''')

# Load 10x data as AnnData
#adata = sc.read_10x_mtx(args.starsolo[0] + args.sample[0] + '/output/Gene/filtered/',cache=True) 

# Set names of observation as sample + _ + barcode/probe
#adata.obs_names = [args.sample[0]+'_'+i.split('-')[0] for i in adata.obs_names]

# Filer genes expressed in less than 3 cells
#sc.pp.filter_genes(adata, min_cells=3)

# Filer cells with less than 10 genes expressed
#sc.pp.filter_cells(adata, min_genes=150)

# Extract mitochondial genes
#mito_genes = [name for name in adata.var_names if name.startswith('MT-')]
#for each cell compute fraction of counts in mito genes vs. all genes
#the `.A1` is only necessary, as X is sparse - it transform to a dense array after summing
#adata.obs['percent_mito'] = np.sum(
#   adata[:, mito_genes].X, axis=1).A1 / np.sum(adata.X, axis=1).A1

# Extract ribosomal genes 
#ribo_genes = [name for name in adata.var_names if name.startswith('RPS') or name.startswith('RPL')]
#adata.obs['percent_ribo'] = np.sum(adata[:, ribo_genes].X, axis = 1).A1 / np.sum(adata.X, axis = 1).A1

#add the total counts per cell as observations-annotation to adata
#adata.obs['n_counts'] = adata.X.sum(axis=1).A1

adata = reptract_utils.read_cellbender_files(args.sample[0], args.cellbender[0])
adata.obs['predicted_doublets'] = adata.obs['predicted_doublets'].astype(float)
print('Total number of cells: {:d}'.format(adata.n_obs))
print('Total number of genes: {:d}'.format(adata.n_vars))

# Make diagnostic plots for per-sample quality 
reptract_utils.qc_plots_sample(adata, args.sample[0], args.figures[0])

# Save anndata object 
adata.write(args.sample[0] + ".h5ad")
